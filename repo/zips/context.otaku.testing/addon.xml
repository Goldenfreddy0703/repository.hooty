<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<addon id="context.otaku.testing" version="1.0.26" name="Otaku - Global Context Menu Items" provider-name="TeamOtaku">
  <requires>
     <import addon="xbmc.python" version="3.0.0" />
  </requires>
  <extension point="kodi.context.item">
    <menu id="kodi.core.main">
      <item library="default.py" args="findrecommendations">
        <label>Find Recommendations</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.findrecommendations),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + [String.IsEqual(ListItem.DBTYPE,tvshow)|String.IsEqual(ListItem.DBTYPE,movie)]</visible>
      </item>
      <item library="default.py" args="findrelations">
        <label>Find Relations</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.findrelations),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + [String.IsEqual(ListItem.DBTYPE,tvshow)|String.IsEqual(ListItem.DBTYPE,movie)]</visible>
      </item>
      <item library="default.py" args="getwatchorder">
        <label>Get Watch Order</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.getwatchorder),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + [String.IsEqual(ListItem.DBTYPE,tvshow)|String.IsEqual(ListItem.DBTYPE,movie)]</visible>
      </item>
      <item library="default.py" args="markedaswatched">
        <label>Marked as Watched [COLOR blue]WatchList[/COLOR]</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.markedaswatched),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + [String.IsEqual(ListItem.DBTYPE,episode) | String.IsEqual(ListItem.DBTYPE,movie)] + !Player.HasMedia</visible>
      </item>
      <item library="default.py" args="rescrape">
        <label>Rescrape</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.rescrape),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + [String.IsEqual(ListItem.DBTYPE,episode)|String.IsEqual(ListItem.DBTYPE,movie)] + !Player.HasMedia</visible>
      </item>
      <item library="default.py" args="sourceselect">
        <label>Source Select</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.sourceselect),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + [String.IsEqual(ListItem.DBTYPE,episode)|String.IsEqual(ListItem.DBTYPE,movie)] + !Player.HasMedia</visible>
      </item>
      <item library="default.py" args="logout">
        <label>Logout</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.logout),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + String.Contains(ListItem.folderpath,/watchlist/)</visible>
      </item>
      <item library="default.py" args="deletefromdatabase">
        <label>Delete From Database</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.deletefromdatabase),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + [String.IsEqual(ListItem.DBTYPE,tvshow)|String.IsEqual(ListItem.DBTYPE,movie)]</visible>
      </item>
      <item library="default.py" args="watchlist">
        <label>WatchList Manager</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.watchlist),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/) + [String.IsEqual(ListItem.DBTYPE,tvshow)|String.IsEqual(ListItem.DBTYPE,movie)]</visible>
      </item>
      <item library="default.py" args="fanartselect">
        <label>Select Fanart</label>
        <visible>String.IsEqual(Window(home).Property(context.otaku.testing.fanartselect),true) + String.StartsWith(ListItem.Path,plugin://plugin.video.otaku.testing/)+[String.IsEqual(ListItem.DBTYPE,tvshow)|String.IsEqual(ListItem.DBTYPE,movie)]</visible>
      </item>
    </menu>
  </extension>
  <extension point="xbmc.service" library="service.py" />
  <extension point="xbmc.addon.metadata">
    <summary lang="en">Otaku - Global Context Menu Items</summary>
    <description lang="en">Adds Global Contextual Menu Items for otaku menu items throughout Kodi
    </description>
    <platform>all</platform>
    <license>GPL-3.0</license>
    <forum></forum>
    <website></website>
    <source></source>
    <disclaimer lang="en"></disclaimer>
    <assets>
      <icon>icon.png</icon>
      <fanart>fanart.jpg</fanart>
      <clearlogo>logo.png</clearlogo>
      <poster>poster.png</poster>
    </assets>
  </extension>
</addon>
